# NMakefile for NymphCast GUI Player.
#
# Build NymphCast NymphCastPlayer QT GUI program (MSVC).
#
# Created 17 October 2021.
# Copyright (c) 2021 Nyanko.ws
#
# Usage: nmake -f NMakefile [definitions] [target]
#
# Definitions:
# - NC_STATIC={0|1}
# - NC_CONFIG={Debug|Release}
# - NC_CPPSTD={flag}
# - NC_LNKCRT={flag}
# - NC_WARNING={flag}
# - NC_OPTIMIZATION={flag}
# - QT5_ROOT={install-folder}
# - QT5_INCLUDE_FIX={}
# - POCO_ROOT={install-folder}]
# - NYMPHRPC_ROOT={install-folder}
# - LIBNYMPHCAST_ROOT={install-folder}
# - INSTALL_PREFIX={install-folder}
#
# Targets:
# - all
# - bin, same as all
# - install
# - clean
# - dist-clean
# - real-clean, same as dist-clean
#
# Configuration:
# - `NC_STATIC` defaults to `0`.
# - `NC_CONFIG` defaults to `Release`
# - `NC_CPPSTD` defaults to `-std:c++latest`.
# - `NC_LNKCRT` defaults to `-MD`.
# - `NC_WARNING` defaults to empty, default compiler behaviour.
# - `NC_OPTIMIZATION` defaults to `-Od` for Debug, `-O2` for Release.
# - `INSTALL_PREFIX` defaults to `D:\Programs\NymphCastPlayer`
# - If defined, environment variable `QT5_ROOT` is used for QT dependency [D:\Libraries\Qt\5.15.2\msvc2015_64]
# - If defined, environment variable `POCO_ROOT` is used for Poco dependency [D:\Libraries\Poco].
# - If defined, environment variable `NYMPHRPC_ROOT` is used for NymphRPC dependency [D:\Libraries\NymphRPC].
# - If defined, environment variable `LIBNYMPHCAST_ROOT` is used for LibNymphCast dependency [D:\Libraries\LibNymphCast].
#
# Dependencies:
# - NymphRPC: build and install project NymphRPC with nmake.
# - LibNymphCast: build and install project NymphRPC with nmake.
# - Poco: PocoNet, PocoUtil, PocoFoundation, PocoJSON
# - Qt 5: Qt5Core, Qt5Gui, Qt5Widgets
#
# Product build directories:
# - .\build\x86_{32|64}-w64-msvc\{Debug|Release}
# - .\obj\static\x86_{32|64}-w64-msvc\{Debug|Release}
#
# Use the Microsoft C++ toolset from the command line.
# https://docs.microsoft.com/en-us/cpp/build/building-on-the-command-line?view=msvc-160
#

# Configuration:

# Note: no space before macro being defined.

!ifdef NC_STATIC
LIB_STATIC = $(NC_STATIC)
!else
LIB_STATIC = 0
!endif

!ifdef NC_CONFIG
LIB_CONFIG = $(NC_CONFIG)
!else
LIB_CONFIG = Release
!endif

LIB_DEF_CPPSTD = -std:c++latest

!ifdef NC_CPPSTD
LIB_CPPSTD = $(NC_CPPSTD)
!else
LIB_CPPSTD = $(LIB_DEF_CPPSTD)
!endif

LIB_DEF_LNKCRT = -MD

!ifdef NC_LNKCRT
LIB_LNKCRT = $(NC_LNKCRT)
!else
LIB_LNKCRT = $(LIB_DEF_LNKCRT)
!endif

!if "$(LIB_LNKCRT)" == "-MT"
LIB_LNKCRT_MT = mt
!else
LIB_LNKCRT_MT =
!endif

!ifndef QT5_ROOT
QT5_ROOT = D:\Libraries\Qt\5.15.2\msvc2015_64
QT5_INCLUDE_FIX=
!endif

!ifndef POCO_ROOT
POCO_ROOT = D:\Libraries\Poco
!endif

!ifndef NYMPHRPC_ROOT
NYMPHRPC_ROOT = D:\Libraries\NymphRPC
!endif

!ifndef LIBNYMPHCAST_ROOT
LIBNYMPHCAST_ROOT = D:\Libraries\LibNymphCast
!endif

!ifndef INSTALL_PREFIX
INSTALL_PREFIX = D:\Programs\NymphCastPlayer
!endif

!ifdef NC_OPTIMIZATION
LIB_OPTIMIZATION = $(NC_OPTIMIZATION)
!elseif "$(LIB_CONFIG)" == "Release"
LIB_OPTIMIZATION = -O2
!else
LIB_OPTIMIZATION = -Od
!endif

!ifdef NC_WARNING
LIB_WARNING = $(NC_WARNING)
!else
LIB_WARNING =	# Use default warning level
!endif

# End Configuration.

# Determine 32, or 64 bit:

!if "$(VSCMD_ARG_TGT_ARCH)" == "x86"
LIB_BITS     = 32
LIB_BITS_SFX =
LIB_BITS_CFG = Win32
!elseif "$(VSCMD_ARG_TGT_ARCH)" == "x64"
LIB_BITS     = 64
LIB_BITS_SFX = 64
LIB_BITS_CFG = x64
!else
!error [Got unexpected target architecture '$(VSCMD_ARG_TGT_ARCH)'. Bailing out.]
!endif

# Sanity checks:

!if "$(LIB_CONFIG)" != "Debug" && "$(LIB_CONFIG)" != "Release"
!error [Expecting 'CONFIG=Debug' or 'CONFIG=Release', got 'CONFIG=$(LIB_CONFIG)'. Bailing out.]
!endif

# !if !exist("$(QT5_ROOT)\include\QtCore\qconfig.h")

!if !exist("$(QT5_ROOT)\include\qt5\QtCore\qconfig.h")
!error [Cannot find Qt dependency at '$(QT5_ROOT)'. Bailing out.]
!endif

!if !exist("$(POCO_ROOT)\include\Poco\Poco.h")
!error [Cannot find Poco dependency at '$(POCO_ROOT)'. Bailing out.]
!endif

!if !exist("$(NYMPHRPC_ROOT)\include\nymph\nymph.h")
!error [Cannot find NymphRPC dependency at '$(NYMPHRPC_ROOT)'. Bailing out.]
!endif

!if !exist("$(LIBNYMPHCAST_ROOT)\include\nymphcast_client.h")
!error [Cannot find libNymphCast dependency at '$(LIBNYMPHCAST_ROOT)'. Bailing out.]
!endif

# INACTIVE: Setup desired toolset ()
# Note: did not get this to work; use the NMake from the cmd for the desired toolset.

# !if ["$(VCINSTALLDIR)\Auxiliary\Build\vcvars$(LIB_BITS).bat" ]
# !endif

# Commands:

CXX   = cl -nologo
LIB   = lib -nologo
RC    = rc -nologo

CP    = copy /Y
RM    = del
CD    = cd
MKDIR = md		# Note: Do not use MAKEDIR=... as MAKEDIR is an NMake macro.

# Inno Setup compiler:
SETUP = C:\Program Files (x86)\Inno Setup 6\iscc.exe
SETUP_OPTIONS = -Q -DMyAppVersion=$(PRODUCT_VSTR)

!if !exist("$(SETUP)")
SETUP = iscc.exe
!endif

# Product-related macros:
# Include the Qt-style file with the versioning information ('NCVERSION' variable), see RES_HEADER.
!include version.pri

PRODUCT_NAME = "NymphCast Player"
PRODUCT_COPY = "Copyright (C) 2019-2022, Nyanko"
PRODUCT_VSTR = "$(NCVERSION)"

BIN_VERSION = -D__NCVERSION="\"$(NCVERSION)\""	# TODO obtain version from file; NMake does not support :=

BIN_OUTPUT  = NymphCastPlayer.exe

RES_INPUT   = $(BIN_OUTPUT:.exe=.rc)		# version resource
RES_OUTPUT  = $(BIN_OUTPUT:.exe=.res)		# compiled resource
RES_HEADER  = NMakefile-version.h			# version header to generate

SETUP_INPUT = Setup-NymphCastPlayer-dynamic.iss

SRC_FOLDER  = .
#LIB_ARCH   = $(VSCMD_ARG_TGT_ARCH)_$(LIB_BITS)-w64-msvc	# e.g.: x86_32-w64-msvc
LIB_ARCH    = x86_$(LIB_BITS)-w64-msvc				# e.g.: x86_32-w64-msvc
BIN_FOLDER  = build/$(LIB_ARCH)/$(LIB_CONFIG)		# e.g.: build\x86_32-w64-msvc\Release
LIB_FOLDER  = lib/$(LIB_ARCH)/$(LIB_CONFIG)			# e.g.: lib\x86_32-w64-msvc\Release
OBJ_FOLDER  = obj/static/$(LIB_ARCH)/$(LIB_CONFIG)	# e.g.: obj\static\x86_32-w64-msvc\Release
OBJ_FOLDER_BS = $(OBJ_FOLDER:/=\)					# use backslashes when required

LIB_INCLUDE = \
    -I $(SRC_FOLDER) \
    -I $(OBJ_FOLDER) \
    -I $(LIBNYMPHCAST_ROOT)/include \
    -I $(NYMPHRPC_ROOT)/include \
    -I $(POCO_ROOT)/include \
    -I $(QT5_ROOT)/include/$(QT5_INCLUDE_FIX) \
    -I $(QT5_ROOT)/include/$(QT5_INCLUDE_FIX)QtCore \
    -I $(QT5_ROOT)/include/$(QT5_INCLUDE_FIX)QtGui \
    -I $(QT5_ROOT)/include/$(QT5_INCLUDE_FIX)QtWidgets \
    -I litehtml \
    -I litehtml/include \
    -I litehtml/include/litehtml \
    -I litehtml/src/gumbo/include \
    -I litehtml/src/gumbo/include/gumbo \
    -I litehtml\src\gumbo\visualc\include

LIB_LIBS = \
    NymphCast.lib \
    NymphRPC.lib \
    PocoFoundation.lib \
    PocoJSON.lib \
    PocoNet.lib \
    PocoUtil.lib \
    Qt5Core.lib \
    Qt5Gui.lib \
    Qt5Widgets.lib

LIB_DLLS = \
	$(POCO_ROOT)/bin/pcre.dll \
	$(POCO_ROOT)/bin/PocoFoundation.dll \
	$(POCO_ROOT)/bin/PocoNet.dll \
	$(POCO_ROOT)/bin/PocoUtil.dll \
	$(POCO_ROOT)/bin/libpng16.dll \
	$(POCO_ROOT)/bin/zlib1.dll \
	$(QT5_ROOT)/bin/Qt5Core.dll \
	$(QT5_ROOT)/bin/Qt5Gui.dll \
	$(QT5_ROOT)/bin/Qt5Widgets.dll \
	$(QT5_ROOT)/bin/Qt5Svg.dll \
	$(QT5_ROOT)/bin/icudt69.dll \
	$(QT5_ROOT)/bin/icuin69.dll \
	$(QT5_ROOT)/bin/icutu69.dll \
	$(QT5_ROOT)/bin/icuuc69.dll \
	$(QT5_ROOT)/bin/libpng16.dll \
	$(QT5_ROOT)/bin/pcre2-16.dll \
	$(QT5_ROOT)/bin/zstd.dll

LIB_DLLS_QT_PLTFRM = \
	$(QT5_ROOT)/plugins/platforms/qwindows.dll

!if $(LIB_STATIC) != 0
LIB_DEFS_STATIC = -DPOCO_STATIC
!else
LIB_DEFS_STATIC =
!endif

LIB_FLAGS = -Zc:strictStrings-
LIB_DEFS  = $(LIB_DEFS_STATIC) -DUNICODE -D_UNICODE -DWIN32 -DMINGW_HAS_SECURE_API=1 -DQT_DEPRECATED_WARNINGS -DLITEHTML_UTF8 -DQT_NO_DEBUG -DQT_WIDGETS_LIB -DQT_GUI_LIB -DQT_CORE_LIB
CXXFLAGS  = $(LIB_CPPSTD) -EHsc -Zi -MP $(LIB_LNKCRT) $(LIB_FLAGS) $(LIB_WARNING) $(LIB_OPTIMIZATION) $(BIN_VERSION) $(LIB_DEFS) $(LIB_INCLUDE)

INST_FOLDER_INC = $(INSTALL_PREFIX)\include
INST_FOLDER_LIB = $(INSTALL_PREFIX)\lib
INST_FOLDER_BIN = $(INSTALL_PREFIX)\bin

# MSVC and Windows SDK paths:

# Note: provide these specifically to the linker,
# as they may not be found through the settings made via vcvars{N}.bat.

!if $(LIB_BITS) == 32
LNK_MACHINE = X86
!else
LNK_MACHINE = X64
!endif

LIB_LIBCPATH    = $(VCTOOLSINSTALLDIR)lib\x$(LIB_BITS)
LIB_SDKUMPATH   = $(WINDOWSSDKDIR)LIB\$(WINDOWSSDKLIBVERSION)um\$(LNK_MACHINE)
LIB_SDKUCRTPATH = $(WINDOWSSDKDIR)LIB\$(WINDOWSSDKLIBVERSION)ucrt\$(LNK_MACHINE)

# Create targets:

LIB_SOURCES_DIR = \
	$(SRC_FOLDER)/container_qpainter.cpp \
	$(SRC_FOLDER)/custom_remotes.cpp \
	$(SRC_FOLDER)/main.cpp \
	$(SRC_FOLDER)/mainwindow.cpp \
	$(SRC_FOLDER)/qlitehtmlwidget.cpp \
	$(SRC_FOLDER)/remotes.cpp \
	$(OBJ_FOLDER)/moc_custom_remotes.cpp \
	$(OBJ_FOLDER)/moc_mainwindow.cpp \
	$(OBJ_FOLDER)/moc_qlitehtmlwidget.cpp \
	$(OBJ_FOLDER)/moc_remotes.cpp \
	$(OBJ_FOLDER)/qrc_resources.cpp \
	$(SRC_FOLDER)/litehtml/src/background.cpp \
	$(SRC_FOLDER)/litehtml/src/box.cpp \
	$(SRC_FOLDER)/litehtml/src/context.cpp \
	$(SRC_FOLDER)/litehtml/src/css_length.cpp \
	$(SRC_FOLDER)/litehtml/src/css_selector.cpp \
	$(SRC_FOLDER)/litehtml/src/document.cpp \
	$(SRC_FOLDER)/litehtml/src/el_anchor.cpp \
	$(SRC_FOLDER)/litehtml/src/el_base.cpp \
	$(SRC_FOLDER)/litehtml/src/el_before_after.cpp \
	$(SRC_FOLDER)/litehtml/src/el_body.cpp \
	$(SRC_FOLDER)/litehtml/src/el_break.cpp \
	$(SRC_FOLDER)/litehtml/src/el_cdata.cpp \
	$(SRC_FOLDER)/litehtml/src/el_comment.cpp \
	$(SRC_FOLDER)/litehtml/src/el_div.cpp \
	$(SRC_FOLDER)/litehtml/src/el_font.cpp \
	$(SRC_FOLDER)/litehtml/src/el_image.cpp \
	$(SRC_FOLDER)/litehtml/src/el_li.cpp \
	$(SRC_FOLDER)/litehtml/src/el_link.cpp \
	$(SRC_FOLDER)/litehtml/src/el_para.cpp \
	$(SRC_FOLDER)/litehtml/src/el_script.cpp \
	$(SRC_FOLDER)/litehtml/src/el_space.cpp \
	$(SRC_FOLDER)/litehtml/src/el_style.cpp \
	$(SRC_FOLDER)/litehtml/src/el_table.cpp \
	$(SRC_FOLDER)/litehtml/src/el_td.cpp \
	$(SRC_FOLDER)/litehtml/src/el_text.cpp \
	$(SRC_FOLDER)/litehtml/src/el_title.cpp \
	$(SRC_FOLDER)/litehtml/src/el_tr.cpp \
	$(SRC_FOLDER)/litehtml/src/element.cpp \
	$(SRC_FOLDER)/litehtml/src/gumbo/attribute.c \
	$(SRC_FOLDER)/litehtml/src/gumbo/char_ref.c \
	$(SRC_FOLDER)/litehtml/src/gumbo/error.c \
	$(SRC_FOLDER)/litehtml/src/gumbo/parser.c \
	$(SRC_FOLDER)/litehtml/src/gumbo/string_buffer.c \
	$(SRC_FOLDER)/litehtml/src/gumbo/string_piece.c \
	$(SRC_FOLDER)/litehtml/src/gumbo/tag.c \
	$(SRC_FOLDER)/litehtml/src/gumbo/tokenizer.c \
	$(SRC_FOLDER)/litehtml/src/gumbo/utf8.c \
	$(SRC_FOLDER)/litehtml/src/gumbo/util.c \
	$(SRC_FOLDER)/litehtml/src/gumbo/vector.c \
	$(SRC_FOLDER)/litehtml/src/html.cpp \
	$(SRC_FOLDER)/litehtml/src/html_tag.cpp \
	$(SRC_FOLDER)/litehtml/src/iterators.cpp \
	$(SRC_FOLDER)/litehtml/src/media_query.cpp \
	$(SRC_FOLDER)/litehtml/src/num_cvt.cpp \
	$(SRC_FOLDER)/litehtml/src/style.cpp \
	$(SRC_FOLDER)/litehtml/src/stylesheet.cpp \
	$(SRC_FOLDER)/litehtml/src/table.cpp \
	$(SRC_FOLDER)/litehtml/src/utf8_strings.cpp \
	$(SRC_FOLDER)/litehtml/src/web_color.cpp

# Two steps:

LIB_OBJECTS_TMP0 = $(LIB_SOURCES_DIR:.cpp=.obj)
LIB_OBJECTS_TMP  = $(LIB_OBJECTS_TMP0:.c=.obj)

# LIB_OBJECTS_DIR = $(LIB_OBJECTS_TMP:src/=$(OBJ_FOLDER)/)	# <== This seems to not work.

# TODO ./ => src
# Write-out all permutations:

!if     "$(LIB_BITS)" == "32" && "$(LIB_CONFIG)" == "Debug"
LIB_OBJECTS_DIR = $(LIB_OBJECTS_TMP:./=obj/static/x86_32-w64-msvc/Debug/)
!elseif "$(LIB_BITS)" == "32" && "$(LIB_CONFIG)" == "Release"
LIB_OBJECTS_DIR = $(LIB_OBJECTS_TMP:./=obj/static/x86_32-w64-msvc/Release/)
!elseif "$(LIB_BITS)" == "64" && "$(LIB_CONFIG)" == "Debug"
LIB_OBJECTS_DIR = $(LIB_OBJECTS_TMP:./=obj/static/x86_64-w64-msvc/Debug/)
!elseif "$(LIB_BITS)" == "64" && "$(LIB_CONFIG)" == "Release"
LIB_OBJECTS_DIR = $(LIB_OBJECTS_TMP:./=obj/static/x86_64-w64-msvc/Release/)
!endif

#
# Inference rules:
# Note: OBJ_FOLDER contains moc_*.cpp files generated via Qt's moc.exe.
#

{$(SRC_FOLDER)/}.cpp{$(OBJ_FOLDER)/}.obj:
	$(CXX) -c $(CXXFLAGS) -Fo$@ $<

{$(OBJ_FOLDER)/}.cpp{$(OBJ_FOLDER)/}.obj:
	$(CXX) -c $(CXXFLAGS) -Fo$@ $<

{$(SRC_FOLDER)/litehtml/src/}.cpp{$(OBJ_FOLDER)/litehtml/src/}.obj:
	$(CXX) -c $(CXXFLAGS) -Fo$@ $<

{$(SRC_FOLDER)/litehtml/src/gumbo/}.c{$(OBJ_FOLDER)/litehtml/src/gumbo/}.obj:
	$(CXX) -c $(CXXFLAGS) -Fo$@ $<

#
# Targets:
#

all: print-configuration prg

print-configuration:
	@echo.
	@echo Building program '$(BIN_OUTPUT)' with Configuration:
	@echo "- LIB_STATIC       : '$(LIB_STATIC)'"
	@echo "- LIB_CONFIG       : '$(LIB_CONFIG)'"
	@echo "- LIB_BITS         : '$(LIB_BITS)'"
	@echo "- LIB_CPPSTD       : '$(LIB_CPPSTD)'"
	@echo "- LIB_WARNING      : '$(LIB_WARNING)'"
	@echo "- LIB_OPTIMIZATION : '$(LIB_OPTIMIZATION)'"
	@echo "- LIB_LNKCRT       : '$(LIB_LNKCRT)'"
	@echo "- BIN_FOLDER       : '$(BIN_FOLDER)'"
	@echo "- OBJ_FOLDER       : '$(OBJ_FOLDER)'"
	@echo "- QT5_ROOT         : '$(QT5_ROOT)'"
	@echo "- QT5_INCLUDE_FIX  : '$(QT5_INCLUDE_FIX)'"
	@echo "- POCO_ROOT        : '$(POCO_ROOT)'"
	@echo "- NYMPHRPC_ROOT    : '$(NYMPHRPC_ROOT)'"
	@echo "- LIBNYMPHCAST_ROOT: '$(LIBNYMPHCAST_ROOT)'"
	@echo "- INSTALL_PREFIX   : '$(INSTALL_PREFIX)'"
	@echo "- LIB_LIBCPATH     : '$(LIB_LIBCPATH)'"
	@echo "- LIB_SDKUMPATH    : '$(LIB_SDKUMPATH)'"
	@echo "- LIB_SDKUCRTPATH  : '$(LIB_SDKUCRTPATH)'"
	@echo.
#	@echo "- sources: $(LIB_SOURCES_DIR)"
#	@echo "- objects: $(LIB_OBJECTS_DIR)"
#	@echo.

prg: makedir-prg qmake rcc moc $(BIN_FOLDER)\$(BIN_OUTPUT)

makedir-prg:
	-$(MKDIR) "$(BIN_FOLDER)" > nul 2>&1
	-$(MKDIR) "$(OBJ_FOLDER)/litehtml/src/gumbo" > nul 2>&1

# Dependencies:

# Qt dependencies:

qmake:
	cd $(OBJ_FOLDER) & qmake -nocache ../../../..

rcc: $(OBJ_FOLDER)/qrc_resources.cpp

moc: $(OBJ_FOLDER)/moc_mainwindow.cpp $(OBJ_FOLDER)/moc_qlitehtmlwidget.cpp $(OBJ_FOLDER)/moc_remotes.cpp $(OBJ_FOLDER)/moc_custom_remotes.cpp

clean-qmake: clean-rcc clean-moc clean-uic
#	$(RM) $(OBJ_FOLDER_BS)\...

clean-rcc:
	$(RM) $(OBJ_FOLDER_BS)\qrc_resources.cpp

clean-moc:
	$(RM) $(OBJ_FOLDER_BS)\moc_mainwindow.cpp $(OBJ_FOLDER_BS)\moc_qlitehtmlwidget.cpp $(OBJ_FOLDER_BS)\moc_remotes.cpp $(OBJ_FOLDER_BS)\moc_custom_remotes.cpp > nul 2>&1

clean-uic:
		$(RM) $(OBJ_FOLDER_BS)\ui_mainwindow.h $(OBJ_FOLDER_BS)\ui_remotes.h $(OBJ_FOLDER_BS)\ui_custom_remotes.h

$(OBJ_FOLDER)/qrc_resources.cpp: resources.qrc
	rcc.exe --name resources resources.qrc -o $(OBJ_FOLDER)/qrc_resources.cpp

$(OBJ_FOLDER)/moc_mainwindow.cpp: mainwindow.h mainwindow.ui $(OBJ_FOLDER)/ui_mainwindow.h
	moc.exe $(BIN_VERSION) $(LIB_DEFS) $(LIB_INCLUDE) mainwindow.h -o $(OBJ_FOLDER)/moc_mainwindow.cpp

$(OBJ_FOLDER)/moc_qlitehtmlwidget.cpp: qlitehtmlwidget.h
	moc.exe $(BIN_VERSION) $(LIB_DEFS) $(LIB_INCLUDE) qlitehtmlwidget.h -o $(OBJ_FOLDER)/moc_qlitehtmlwidget.cpp

$(OBJ_FOLDER)/moc_remotes.cpp: remotes.h remotes.ui $(OBJ_FOLDER)/ui_remotes.h
	moc.exe $(BIN_VERSION) $(LIB_DEFS) $(LIB_INCLUDE) remotes.h -o $(OBJ_FOLDER)/moc_remotes.cpp

$(OBJ_FOLDER)/moc_custom_remotes.cpp: custom_remotes.h custom_remotes.ui $(OBJ_FOLDER)/ui_custom_remotes.h
	moc.exe $(BIN_VERSION) $(LIB_DEFS) $(LIB_INCLUDE) custom_remotes.h -o $(OBJ_FOLDER)/moc_custom_remotes.cpp

$(OBJ_FOLDER)/ui_mainwindow.h: mainwindow.ui qlitehtmlwidget.h qlitehtml_global.h
	uic.exe mainwindow.ui -o $(OBJ_FOLDER)/ui_mainwindow.h

$(OBJ_FOLDER)/ui_remotes.h: remotes.ui
	uic.exe remotes.ui -o $(OBJ_FOLDER)/ui_remotes.h

$(OBJ_FOLDER)/ui_custom_remotes.h: custom_remotes.ui
	uic.exe custom_remotes.ui -o $(OBJ_FOLDER)/ui_custom_remotes.h

# End Qt dependencies

$(LIB_OBJECTS_DIR): $(LIB_SOURCES_DIR)

$(BIN_FOLDER)\$(BIN_OUTPUT): mk-version-sources $(LIB_OBJECTS_DIR)
	$(CXX) -Fe$(BIN_FOLDER)\$(BIN_OUTPUT) $(LIB_OBJECTS_DIR) /link \
	/machine:"$(LNK_MACHINE)" \
	/libpath:"$(NYMPHRPC_ROOT)\lib" \
	/libpath:"$(LIBNYMPHCAST_ROOT)\lib" \
	/libpath:"$(POCO_ROOT)\lib" \
	/libpath:"$(QT5_ROOT)\lib" \
	/libpath:"$(LIB_LIBCPATH)" \
	/libpath:"$(LIB_SDKUMPATH)" \
	/libpath:"$(LIB_SDKUCRTPATH)" \
	$(RES_OUTPUT) \
	$(LIB_LIBS)

# Installation targets:

install: prg makedir-install copy-install

makedir-install:
	-$(MKDIR) "$(INST_FOLDER_BIN:/=\)" > nul 2>&1

copy-install: copy-install-dll
	$(CP) "$(BIN_FOLDER:/=\)\$(BIN_OUTPUT)" "$(INST_FOLDER_BIN:/=\)\" > nul 2>&1

copy-install-dll: copy-install-dll-qtpltfrm $(LIB_DLLS:/=\)
	for %f in ($**) do @$(CP) %f "$(INST_FOLDER_BIN:/=\)\" > nul 2>&1

copy-install-dll-qtpltfrm: $(LIB_DLLS_QT_PLTFRM:/=\)
	for %f in ($**) do @$(CP) %f "$(INST_FOLDER_BIN:/=\)\platforms\" > nul 2>&1

# Package, create Windows installer with Inno Setup (expected in path):

package:
	$(CD) installer & "$(SETUP)" $(SETUP_OPTIONS) $(SETUP_INPUT) & cd ..

# Clean targets:

clean: clean-qmake
	$(RM) /s $(OBJ_FOLDER_BS)\*.obj > nul 2>&1

dist-clean: clean
	$(RM) $(BIN_FOLDER:/=\)\$(BIN_OUTPUT)

real-clean: dist-clean

#
# Create version resource via here-document.
#

# Note: no space between '<<' and filename or KEEP:

mk-version-sources: mk-version-header mk-version-rc

mk-version-header: $(RES_HEADER)

mk-version-rc: $(RES_OUTPUT)

$(RES_HEADER): NMakefile # TODO version.mk
    $(CP) << $(RES_HEADER) > nul
// Note: Generated from NymphCast-Player NMakefile
//
// $(RES_HEADER)
//
// Version info for NymphCast Player.
//
// Created 12 February 2022.
// Copyright (c) 2021 Nyanko.ws
//

#include <Windows.h>

#define NC_VERSION_MAJOR  0
#define NC_VERSION_MINOR  0
#define NC_VERSION_PATCH  0
#define NC_VERSION_BUILD  0
#define NC_VERSION_RC     ""

#define NC_VER_FILE_DESCRIPTION_STR    $(PRODUCT_NAME)
#define NC_VER_FILE_VERSION            NC_VERSION_MAJOR, NC_VERSION_MINOR, NC_VERSION_PATCH, NC_VERSION_BUILD
#define NC_VER_FILE_VERSION_STR        $(PRODUCT_VSTR)

#define NC_VER_PRODUCT_NAME_STR        $(PRODUCT_NAME)
#define NC_VER_PRODUCT_VERSION         NC_VER_FILE_VERSION
#define NC_VER_PRODUCT_VERSION_STR     NC_VER_FILE_VERSION_STR
#define NC_VER_ORIGINAL_FILENAME_STR  "$(BIN_OUTPUT)"
#define NC_VER_INTERNAL_NAME_STR       NC_VER_ORIGINAL_FILENAME_STR
#define NC_VER_COPYRIGHT_STR           $(PRODUCT_COPY)

#ifdef _DEBUG
  #define NC_VER_DEBUG                VS_FF_DEBUG
#else
  #define NC_VER_DEBUG                0
#endif

#define NC_VER_FILEOS                 VOS_NT_WINDOWS32
#define NC_VER_FILEFLAGS              NC_VER_DEBUG
#define NC_VER_FILETYPE               VFT_APP
<<

$(RES_OUTPUT): NMakefile $(RES_HEADER)
    $(RC) <<$(RES_INPUT)
// Note: Generated from NymphCast-Player NMakefile
//
// $(RES_INPUT)
//
// Microsoft Visual C++ resource script for NymphCast Player.
//
// Created 12 February 2022.
// Copyright (c) 2021 Nyanko.ws
//

#include "$(RES_HEADER)"

VS_VERSION_INFO VERSIONINFO
 FILEVERSION        NC_VER_FILE_VERSION
 PRODUCTVERSION     NC_VER_PRODUCT_VERSION
 FILEFLAGSMASK      0x3fL
 FILEFLAGS          NC_VER_FILEFLAGS
 FILEOS             NC_VER_FILEOS
 FILETYPE           NC_VER_FILETYPE
 FILESUBTYPE 0x0L
BEGIN
    BLOCK "StringFileInfo"
    BEGIN
        BLOCK "040904b0"
        BEGIN
            VALUE "FileDescription",  NC_VER_FILE_DESCRIPTION_STR "\0"
            VALUE "FileVersion",      NC_VER_FILE_VERSION_STR "\0"
            VALUE "InternalName",     NC_VER_INTERNAL_NAME_STR "\0"
            VALUE "LegalCopyright",   NC_VER_COPYRIGHT_STR "\0"
            VALUE "OriginalFilename", NC_VER_ORIGINAL_FILENAME_STR "\0"
            VALUE "ProductName",      NC_VER_PRODUCT_NAME_STR
            VALUE "ProductVersion",   NC_VER_PRODUCT_VERSION_STR "\0"
        END
    END
    BLOCK "VarFileInfo"
    BEGIN
        VALUE "Translation", 0x409, 1200
    END
END
<<KEEP

# end of file
